Spring Boot JPA:
----------------------------------------
POM.xml
------------------
<dependency>
		<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.microsoft.sqlserver</groupId>
			<artifactId>mssql-jdbc</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
----------------------------------------------------------------------------------------------------
Students.java
----------------
package com.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name="Student")
public class Students {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int student_id;
	private String student_name;
	private String student_address;
	private String student_phone;
	private String username;
	public Students(int student_id, String student_name, String student_address, String student_phone,
			String username) {
		super();
		this.student_id = student_id;
		this.student_name = student_name;
		this.student_address = student_address;
		this.student_phone = student_phone;
		this.username = username;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public int getStudent_id() {
		return student_id;
	}
	public void setStudent_id(int student_id) {
		this.student_id = student_id;
	}
	public String getStudent_name() {
		return student_name;
	}
	public void setStudent_name(String student_name) {
		this.student_name = student_name;
	}
	public String getStudent_address() {
		return student_address;
	}
	public void setStudent_address(String student_address) {
		this.student_address = student_address;
	}
	public String getStudent_phone() {
		return student_phone;
	}
	public void setStudent_phone(String student_phone) {
		this.student_phone = student_phone;
	}
	public Students() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Students(int student_id, String student_name, String student_address, String student_phone) {
		super();
		this.student_id = student_id;
		this.student_name = student_name;
		this.student_address = student_address;
		this.student_phone = student_phone;
	}
	@Override
	public String toString() {
		return "Students [student_id=" + student_id + ", student_name=" + student_name + ", student_address="
				+ student_address + ", student_phone=" + student_phone + ", username=" + username + "]";
	}
	
	

}
-----------------------------------------------------------------------------------------------------------------------------------
StudentRepository.java
----------------------------
package com.dao;

import java.util.List;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;

import com.model.Students;

public interface StudentRepository extends CrudRepository<Students, Integer>{


//	Here find is called as introducer
//	byName is called as Criteria
	public List<Students> findByUsername(String username);
	
	@Query(value="select * FROM student", nativeQuery=true)
	public List<Students> getAllStudents();
	
	@Query("from Students")
	public List<Students> getAllStudentsJPA();
	
	@Query("select u from Students u where u.student_name=:n")
	public List<Students> getUSerByNameAndUsername(@Param("n") String name);
	
}
------------------------------------------------------------------------------------------------------------------------------------
Demo2DataJpaApplication.java
----------------------------------------------------------
package com;


import java.util.Iterator;
import java.util.List;
import java.util.Optional;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

import com.dao.StudentRepository;
import com.model.Students;

@SpringBootApplication
public class Demo2DataJpaApplication {

	public static void main(String[] args) {
	ApplicationContext	context =SpringApplication.run(Demo2DataJpaApplication.class, args);
	StudentRepository studentRepository = context.getBean(StudentRepository.class);
	Students student = new Students();
	
	student.setStudent_name("Sam");
	student.setStudent_address("Mumbai");
	student.setStudent_phone("+91-12345678");
	
//	Add single student
//	studentRepository.save(student);
	
	Students student2 = new Students();
	student2.setStudent_name("Tom");
	student2.setStudent_address("Chennai");
	student2.setStudent_phone("+91-453526728");
	
	Students student3 = new Students();
	student3.setStudent_name("Tina");
	student3.setStudent_address("Bangalore");
	student3.setStudent_phone("+91-453526728");
	
	List<Students> students = List.of(student2,student3);
	
//	Add multiple students in one go
//	studentRepository.saveAll(students);
//	Iterable<Students> studentsAdded = studentRepository.saveAll(students);
//	studentsAdded.forEach(stud->{
//		System.out.println(stud.getStudent_name());
//	});
	
//	----------------Update-------------------------------
//	Update Student
//	Optional<Students> stud2 =  studentRepository.findById(153);
//	Students st = stud2.get();
//	st.setStudent_name("TinaBull");
//	studentRepository.save(st);
//	System.out.println("Table Updated...");
	
	
//	----------------Display---------------------
//	Getting data from table - single student
//	Optional<Students> stud1 =  studentRepository.findById(153);
//	System.out.println(stud1.get().getStudent_name()+"--"+stud1.get().getStudent_address());
	
//	Getting data from table - all student
//	Iterable<Students> itr2 = studentRepository.findAll();
//	Iterator<Students> irtr = itr2.iterator();
//	for (Students std : itr2) {
//		System.out.println(std.getStudent_name()+"--"+std.getStudent_address());
//	}
	
//	-----------------------Delete------------------------------------
//	delete single student
//	studentRepository.deleteById(152);
//	System.out.println("Deleted");
	
//	Delete All Employee
//	Iterable<Students> allUSer = studentRepository.findAll();
//	studentRepository.deleteAll();
//	System.out.println("All Students Deleted");
	
//	Students student4 = new Students();
//	student4.setStudent_name("James");
//	student4.setStudent_address("Bangalore");
//	student4.setStudent_phone("+91-453526728");
//	student4.setUsername("James123");
//	
//	studentRepository.save(student4);
	
//	List<Students> s1=studentRepository.findByUsername("James123");
//	for (Iterator iterator = s1.iterator(); iterator.hasNext();) {
//		Students st1 = (Students) iterator.next();
//		System.out.println(st1.getUsername());
//		
//	}
	
	List<Students> ss=  studentRepository.getAllStudents();
//	System.out.println(ss.toString());
	for (Iterator<Students> iterator = ss.iterator(); iterator.hasNext();) {
		Students ss1 = (Students) iterator.next();
		System.out.println(ss1.getStudent_name());
		
	}
	
	List<Students> ss1=  studentRepository.getAllStudentsJPA();
//	System.out.println(ss.toString());
	for (Iterator<Students> iterator = ss1.iterator(); iterator.hasNext();) {
		Students ss2 = (Students) iterator.next();
		System.out.println(ss2.getStudent_name());
		
	}
	
	List<Students> ss2 = studentRepository.getUSerByNameAndUsername("Tina");
	for (Iterator<Students> iterator = ss2.iterator(); iterator.hasNext();) {
		Students ss3 = (Students) iterator.next();
		System.out.println(ss3.getStudent_name());
		
	}
	
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------


